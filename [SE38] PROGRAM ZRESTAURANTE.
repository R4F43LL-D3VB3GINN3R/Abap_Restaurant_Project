PROGRAM ZRESTAURANTE.

"----------------------------------------------------------------------

"                [TABELA TRANSPARENTE: ZRESTEMPLOYEE]                 "

"ID_GERENTE       TYPE ZIDGER CHAVE PRIMÁRIA    -> ID
"ID_SAL_FK        TYPE ZIDGER CHAVE ESTRANGEIRA -> ID_SALARIO
"CARGO            TYPE ZGERENTE                 -> CARGO
"FUNCIONARIO      TYPE ZFUNCIONARIO             -> NOME
"DATA_CONTRATACAO TYPE ZDATACONTR               -> DATA DA CONTRATAÇÃO
"TURNO            TYPE ZTURNO                   -> TURNO
"SEXO             TYPE ZSEXF                    -> SEXO
"IDADE            TYPE ZIDADEF                  -> IDADE
"ORDENADO         TYPE ZORDENADO                -> ORDENADO OU SALÁRIO
"PAGAMENTO        TYPE ZPAGAMENTO               -> STATUS DO PAGAMENTO

"----------------------------------------------------------------------

"----------------------------------------------------------------------

"                  [TABELA TRANSPARENTE: ZRESTSAL]                    "

"ID               TYPE ZIDGER CHAVE PRIMÁRIA -> ID
"SALBRUTO         TYPE ZSALBRUTO             -> SALÁRIO BRUTO
"SALIQUIDO        TYPE ZSALIQUIDO            -> SALÁRIO LÍQUIDO
"PLANSAUDE        TYPE ZPLANSAUDE            -> PLANO DE SAÚDE
"CSINDICAL        TYPE ZSINDICAL             -> CONTRIBUIÇÃO SINDICAL
"VALETRANS        TYPE ZVALETRANS            -> VALETRANSPORTE
"HORAEXTRA        TYPE ZHORAEXTRA            -> HORAS EXTRAS
"DEDUCOES         TYPE ZDEDUCOES             -> DEDUÇÕES SALARIAIS
"SEGOSOCIAL       TYPE ZSEGSOCIAL            -> SEGURANÇA SOCIAL
"IRS              TYPE ZIRS                  -> IRS
"BONUS            TYPE ZBONUS                -> BÔNUS SALARIAL
"SUBDECFER        TYPE ZSUBDECFER            -> SUBSÍDIO FÉRIAS & DÉCIMO
"SUBDP            TYPE ZSUBDP                -> SUBTRAÇÃO DE PRESENÇAS

"----------------------------------------------------------------------

TYPES: WA_EMP TYPE ZRESTEMPLOYEE,                 "ESTRUTURA GLOBAL DO TIPO DA MINHA TABELA TRANSPARENTE."
       WA_SAL TYPE ZRESTSAL.                      "ESTRUTURA GLOBAL DO TIPO DA MINHA TABELA TRANSPARENTE."

DATA: LS_EMP TYPE WA_EMP,                         "ESTRUTURA LOCAL DO TIPO DA MINHA ESTRUTURA GLOBAL."
      LS_SAL TYPE WA_SAL,                         "ESTRUTURA LOCAL DO TIPO DA MINHA ESTRUTURA GLOBAL."
      LT_EMP TYPE TABLE OF ZRESTEMPLOYEE,         "TABELA INTERNA DO TIPO DA MINHA TABELA TRANSPARENTE."
      LT_SAL TYPE TABLE OF ZRESTSAL.              "TABELA INTERNA DO TIPO DA MINHA TABELA TRANSPARENTE.

DATA: REPORTALV TYPE REF TO CL_SALV_TABLE,     "VARIÁVEL QUE FAZ REFERÊNCIA AO OBJETO DA CLASSE CL_SALV_TABLE."
      FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS. "VARIÁVEL QUE VAI ARMAZENAR A REFERÊNCIA AO OBJETO DA CLASSE CL_SALV_FUNCTIONS."

DATA: OKCODE_100 TYPE SY-UCOMM, "VARIÁVEL DO TIPO COMANDO DE FUNÇÃO DYNPRO PARA TELA 100."
      OKCODE_200 TYPE SY-UCOMM, "VARIÁVEL DO TIPO COMANDO DE FUNÇÃO DYNPRO PARA TELA 200."
      OKCODE_300 TYPE SY-UCOMM, "VARIÁVEL DO TIPO COMANDO DE FUNÇÃO DYNPRO PARA TELA 300."
      OKCODE_400 TYPE SY-UCOMM, "VARIÁVEL DO TIPO COMANDO DE FUNÇÃO DYNPRO PARA TELA 400."
      OKCODE_500 TYPE SY-UCOMM. "VARIÁVEL DO TIPO COMANDO DE FUNÇÃO DYNPRO PARA TELA 500."

"----------------------------------------------------------------------

*&---------------------------------------------------------------------*
*& Module ANTES_DO_LOGIN_0100 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE ANTES_DO_LOGIN_0100 OUTPUT.

* SET PF-STATUS 'xxxxxxxx'.
* SET TITLEBAR 'xxx'.

  DATA:
    IN1 TYPE C LENGTH 10, "LOGIN DO PROGRAMA NA TELA 100
    IN2 TYPE C LENGTH 10. "SENHA DO PROGRAMA NA TELA 100

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  DEPOIS_DO_LOGIN_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DEPOIS_DO_LOGIN_0100 INPUT.

  CASE OKCODE_100.                         "EM CASO DE OKCODE_100...
    WHEN 'FCT_ENTRAR'.                     "E QUANDO O BOTÃO ENTRAR FOR PRESSIONADO...
      IF IN1 EQ 'ADMIN0' AND IN2 EQ '000'. "E SE O LOGIN FOR IGUAL A ADMIN0 JUNTAMENTE COM A SENHA IGUAL A 000...
        CALL SCREEN '200'.                 "IR PARA A TELA 100.
      ENDIF.
    WHEN 'FCT_SAIR'.                       "E QUANDO O BOTÃO SAIR FOR PRESSIONADO...
      LEAVE PROGRAM.                       "SAIR DO PROGRAMA.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*& Module ANTES_DE_SELECIONAR OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE ANTES_DE_SELECIONAR OUTPUT.
* SET PF-STATUS 'xxxxxxxx'.
* SET TITLEBAR 'xxx'.

ENDMODULE.


*&---------------------------------------------------------------------*
*&      Module  DEPOIS_DE_SELECIONAR  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DEPOIS_DE_SELECIONAR INPUT.

  CASE OKCODE_200.         "EM CASO DE OKCODE_200...
    WHEN 'FCT_SAIR2'.      "E QUANDO O BOTÃO SAIR FOR PRESSIONADO...
      LEAVE PROGRAM.       "SAIR DO PROGRAMA."
    WHEN 'FCT_CADASTRAR2'. "E QUANDO O BOTÃO CADASTRAR FOR PRESSIONADO...
      CALL SCREEN '300'.   "IR PARA A TELA 300."
    WHEN 'FCT_PAGAR2'.     "E QUANDO O BOTÃO PAGAR FOR PRESSIONADO...
      CALL SCREEN '500'.   "IR PARA A TELA 500."
    WHEN 'FCT_CONSULTAR2'. "E QUANDO O BOTÃO CONSULTAR FOR PRESSIONADO...
      CALL SCREEN '400'.   "IR PARA A TELA 400."
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*& Module ANTES_DO_CADASTRO_300 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE ANTES_DO_CADASTRO_300 OUTPUT.
* SET PF-STATUS 'xxxxxxxx'.
* SET TITLEBAR 'xxx'.

  "TODOS OS INPUTS DA TELA 300 RECEBEM O MESMO TIPO DE ELEMENTO DE DADOS DA MINHA TABELA TRANSPARENTE."

  DATA: IN0_3  TYPE ZIDGER,        "ID"
        IN1_3  TYPE ZGERENTE,      "CARGO"
        IN2_3  TYPE ZFUNCIONARIO,  "NOME"
        IN3_3  TYPE ZDATACONTR,    "DATA"
        IN31_3 TYPE ZTURNO,        "TURNO
        IN4_3  TYPE ZSEXF,         "SEXO"
        IN5_3  TYPE ZIDADEF,       "IDADE"
        IN6_3  TYPE ZORDENADO,     "ORDENADO"
        IN7_3  TYPE ZDESCR.        "OBSERVAÇÕES"

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  DEPOIS_DE_CADASTRAR_300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DEPOIS_DE_CADASTRAR_300 INPUT.

  CASE OKCODE_300.         "EM CASO DE OKCODE_300...
    WHEN 'FCT_SAIR3'.      "E QUANDO O BOTÃO SAIR FOR PRESSIONADO...
      LEAVE PROGRAM.       "SAIR DO PROGRAMA.
    WHEN 'FCT_VOLTAR3'.    "E QUANDO O BOTÃO VOLTAR FOR PRESSIONADO...
      CALL SCREEN '200'.   "IR PARA A TELA 200.
    WHEN 'FCT_CADASTRAR3'. "E QUANDO O BOTÃO CADASTRAR FOR PRESSIONADO...

      "É FUNDAMENTAL USAR O ID_GERENTE NA INSERÇÃO DE DADOS ÀS TABELAS TRANSPARENTES...
      "...POIS O ID DIFERENTE FAZ COM QUE O COMANDO MODIFY NÃO INSIRA DADOS EM CIMA DA MESMA LINHA RECÉM CRIADA."

      LS_EMP-ID_GERENTE = IN0_3.       "ID DA MINHA ESTRUTURA RECEBE O ID DA TELA 300"
      LS_EMP-CARGO = IN1_3.            "CARGO DA MINHA ESTRUTURA RECEBE O CARGO DA TELA 300."
      LS_EMP-FUNCIONARIO = IN2_3.      "FUNCIONARIO DA MINHA ESTRUTURA RECEBE O FUNCIIONARIO DA TELA 300."
      LS_EMP-DATA_CONTRATACAO = IN3_3. "DATA DE CONTRATACAO DA MINHA ESTRUTURA RECEBE A DATA DA TELA 300."
      LS_EMP-TURNO = IN31_3.           "TURNO DE CONTRATAÇÃO DA MINHA ESTRUTURA RECEBE O TURNO DA TELA 300."
      LS_EMP-SEXO = IN4_3.             "SEXO DA MINHA ESTRUTURA RECEBE O SEXO DA TELA 300."
      LS_EMP-IDADE = IN5_3.            "IDADE DA MINHA ESTRUTURA RECEBE A IDADE DA TELA 300."
      LS_EMP-ORDENADO = IN6_3.         "ORDENADO DA MINHA ESTRUTURA RECEBE O ORDENADO DA TELA 300."

      "UPDATE ZRESTEMPLOYEE SET COLUMN = LT_COLUMN WHERE COLUMN_ID = *** "ESTA QUERY FICA AQUI CASO QUEIRA ALTERAR MINHA TABELA TRANSPARENTE.

      APPEND LS_EMP TO LT_EMP.                "INSERIR A MINHA ESTRUTURA NA MINHA TABELA INTERNA."
      MODIFY ZRESTEMPLOYEE FROM TABLE LT_EMP. "INSERIR O CONTEÚDO DA MINHA TABELA INTERNA PARA A TABELA TRANSPARENTE."

  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*& Module ANTES_DO_PAGAMENTO_500 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE ANTES_DO_PAGAMENTO_500 OUTPUT.
* SET PF-STATUS 'xxxxxxxx'.
* SET TITLEBAR 'xxx'.

  "O INPUT ID FUNCIONÁRIO DA TELA 500 RECEBE O MESMO TIPO DE ELEMENTO DE DADOS DA MINHA TABELA TRANSPARENTE."

  DATA: IN1_5 TYPE ZIDGER,     "ID"
        IN2_5 TYPE ZPAGAMENTO. "PAGAMENTO"

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  DEPOIS_DO_PAGAMENTO_0500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DEPOIS_DO_PAGAMENTO_0500 INPUT.

  CASE OKCODE_500.       "EM CASO DE OKCODE_500...
    WHEN 'FCT_VOLTAR5'.  "E QUANDO O BOTÃO VOLTAR FOR PRESSIONADO...
      CALL SCREEN '200'. "IR PARA A TELA 200."
    WHEN 'FCT_SAIR5'.    "E QUANDO O BOTÃO SAIR FOR PRESSIONADO...
      LEAVE PROGRAM.     "SAIR DO PROGRAMA."
    WHEN 'FCT_DEFINIR5'. "E QUANDO O BOTÃO DEFINIR FOR PRESSIONADO...

      "PARA QUE O BOTÃO DEFINIR TENHA A SUA FUNCIONALIDADE, O CAMPO ID E A FORMA DE PAGAMENTO DEVEM ESTAR PREENCHIDOS."

      LS_EMP-ID_GERENTE = IN1_5. "ID DA MINHA ESTRUTURA RECEBE O ID DA TELA 500"
      LS_EMP-PAGAMENTO = IN2_5.  "PAGAMENTO DA MINHA ESTRUTURA RECEBE O PAGAMENTO DA TELA 500".

      APPEND LS_EMP TO LT_EMP. "INSIRA MINHA ESTRUTURA NA TABELA LOCAL"

      UPDATE ZRESTEMPLOYEE SET PAGAMENTO = LS_EMP-PAGAMENTO WHERE ID_GERENTE = IN1_5.
      "ATUALIZE A MINHA TABELA TRANSPARENTE SUBSTITUINDO A COLUNA PAGAMENTO PELO PAGAMENTO DE MINHA ESTRUTURA...
      "ONDE O ID DO GERENTE DE MINHA TABELA FOR IGUAL AO INPUT DA TELA 500."

    WHEN 'FCT_PAGOS5'. "E QUANDO O BOTÃO PAGOS FOR PRESSIONADO...

      SELECT FUNCIONARIO, PAGAMENTO FROM ZRESTEMPLOYEE INTO TABLE @DATA(LT_PAGOS) WHERE PAGAMENTO = 'OK'.

      "SELECIONE O CAMPO FUNCIONARIO E PAGAMENTO DA TABELA ZRESTEMPLOYEE E INSIRA NA TABELA LT_PAGOS ONDE PAGAMENTO RECEBE 'OK'."

      TRY.                                                                  "TENTE
          CALL METHOD CL_SALV_TABLE=>FACTORY                                "CHAMADA DO MÉTODO DA CLASSE DE MANIPULAÇÃOO ALV PARA EXIBIR O RELATÓRIO."
            IMPORTING
              R_SALV_TABLE = REPORTALV                                      "A VARIÁVEL DE REFERÊNCIA À CLASSE CL_SALV_TABLE É IMPORTADA."
            CHANGING
              T_TABLE      = LT_PAGOS.                                      "MINHA TABELA INTERNA É ALTERADA COM A CLÁUSULA CHANGING DO MÉTODO."

          FUNCTIONS = REPORTALV->GET_FUNCTIONS( ).                          "OBTER AS FUNÇÕES DISPONÍVEIS PARA O RELATÓRIO ALV."
          FUNCTIONS->SET_ALL( ABAP_TRUE ).                                  "QUE TODAS AS FUNÇÕES ESTEJAM DISPONÍVEIS."

          CALL METHOD REPORTALV->DISPLAY( ). "CHAMADA DO MÉTODO PARA EXIBIR O RELATÓRIO ALV."
        CATCH CX_SALV_MSG.                                                  "CASO HAJA ALGUM PROBLEMA, SUBSTITUA O TRECHO ANTERIOR DO CÓDIGO POR...
          MESSAGE 'ERROR TO DISPLAY ALV REPORT!' TYPE 'S' DISPLAY LIKE 'I'. "...UMA MENSAGEM DE ERRO"
      ENDTRY.

    WHEN 'FCT_NPAGOS5'.

      SELECT FUNCIONARIO, PAGAMENTO FROM ZRESTEMPLOYEE INTO TABLE @DATA(LT_NPAGOS) WHERE PAGAMENTO = 'PENDENTE'.

      "SELECIONE O CAMPO FUNCIONARIO E PAGAMENTO DA TABELA ZRESTEMPLOYEE E INSIRA NA TABELA LT_PAGOS ONDE PAGAMENTO RECEBE 'OK'."

      TRY.                                                                  "TENTE
          CALL METHOD CL_SALV_TABLE=>FACTORY                                "CHAMADA DO MÉTODO DA CLASSE DE MANIPULAÇÃOO ALV PARA EXIBIR O RELATÓRIO."
            IMPORTING
              R_SALV_TABLE = REPORTALV                                      "A VARIÁVEL DE REFERÊNCIA À CLASSE CL_SALV_TABLE É IMPORTADA."
            CHANGING
              T_TABLE      = LT_NPAGOS.                                     "MINHA TABELA INTERNA É ALTERADA COM A CLÁUSULA CHANGING DO MÉTODO."

          FUNCTIONS = REPORTALV->GET_FUNCTIONS( ).                          "OBTER AS FUNÇÕES DISPONÍVEIS PARA O RELATÓRIO ALV."
          FUNCTIONS->SET_ALL( ABAP_TRUE ).                                  "QUE TODAS AS FUNÇÕES ESTEJAM DISPONÍVEIS."

          CALL METHOD REPORTALV->DISPLAY( ). "CHAMADA DO MÉTODO PARA EXIBIR O RELATÓRIO ALV."
        CATCH CX_SALV_MSG.                                                  "CASO HAJA ALGUM PROBLEMA, SUBSTITUA O TRECHO ANTERIOR DO CÓDIGO POR...
          MESSAGE 'ERROR TO DISPLAY ALV REPORT!' TYPE 'S' DISPLAY LIKE 'I'. "...UMA MENSAGEM DE ERRO"
      ENDTRY.

  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*& Module ANTES_DA_CONSULTA_400 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE ANTES_DA_CONSULTA_400 OUTPUT.
* SET PF-STATUS 'xxxxxxxx'.
* SET TITLEBAR 'xxx'.

  DATA: IN1_4 TYPE ZIDGER,
        CB1_4 TYPE ZPLANSAUDE,
        CB2_4 TYPE ZSINDICAL,
        CB3_4 TYPE ZVALETRANS,
        IN2_4 TYPE ZHORAEXTRA,
        IN5_4 TYPE ZSUBDECFER.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  DEPOIS_DA_CONSULTA_400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DEPOIS_DA_CONSULTA_400 INPUT.

  CASE OKCODE_400.
    WHEN 'FCT_VOLTAR4'.
      CALL SCREEN '200'.
    WHEN 'FCT_SAIR4'.
      LEAVE PROGRAM.
    WHEN 'FCT_INSERIR4'.

      LS_SAL-ID = IN1_4.

      APPEND LS_SAL TO LT_SAL.

      SELECT ORDENADO FROM ZRESTEMPLOYEE INTO TABLE @DATA(LT_ORDENADO) WHERE ID_GERENTE = 1.

      DATA: LV_ORDENADO TYPE ZORDENADO.

      LOOP AT LT_ORDENADO INTO DATA(LS_ORDENADO). 
        LV_ORDENADO = LS_ORDENADO-ORDENADO.
      ENDLOOP.
      
  ENDCASE.

ENDMODULE.
